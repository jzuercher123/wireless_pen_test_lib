import os
import yaml
from pydantic import BaseModel, ValidationError, Field

class GeneralConfig(BaseModel):
    interface: str = "wlan0mon"
    report_directory: str = "reports"
    log_level: str = "INFO"

class ConfigModel(BaseModel):
    general: GeneralConfig

class ConfigurationManager:
    """
    Handles loading, modifying, and saving configurations.
    """

    def __init__(self, config_dir="config", default_file="default_config.yaml", user_file="config.yaml"):
        self.config_dir = config_dir
        self.default_config_path = os.path.join(config_dir, default_file)
        self.user_config_path = os.path.join(config_dir, user_file)
        self.config = None
        self.load_config()

    def load_config(self):
        """
        Loads default and user-specific configurations, merging them.
        """
        try:
            # Load default configuration
            with open(self.default_config_path, "r") as f:
                default_config = yaml.safe_load(f)

            # Load user configuration if it exists
            user_config = {}
            if os.path.exists(self.user_config_path):
                with open(self.user_config_path, "r") as f:
                    user_config = yaml.safe_load(f)

            # Merge configurations and validate
            merged_config = self._merge_configs(default_config, user_config)
            self.config = ConfigModel(**merged_config)
            print("Configuration loaded successfully.")

        except (yaml.YAMLError, ValidationError) as e:
            print(f"Error loading configuration: {e}")
            raise

    def _merge_configs(self, default, override):
        """
        Merges default and user configurations.
        """
        merged = default.copy()
        for key, value in override.items():
            if isinstance(value, dict) and key in merged:
                merged[key] = self._merge_configs(merged[key], value)
            else:
                merged[key] = value
        return merged

    def get(self, key_path):
        """
        Retrieves a configuration value using a dot-separated key path.
        """
        keys = key_path.split(".")
        value = self.config.dict()
        for key in keys:
            value = value.get(key)
            if value is None:
                raise KeyError(f"Key '{key_path}' not found in configuration.")
        return value

    def set(self, key_path, value):
        """
        Sets a configuration value using a dot-separated key path.
        """
        keys = key_path.split(".")
        config_dict = self.config.dict()
        target = config_dict
        for key in keys[:-1]:
            target = target.setdefault(key, {})
        target[keys[-1]] = value

        # Validate updated configuration
        self.config = ConfigModel(**config_dict)

    def save(self):
        """
        Saves the current configuration to the user configuration file.
        """
        with open(self.user_config_path, "w") as f:
            yaml.dump(self.config.dict(), f)
        print("Configuration saved successfully.")

    def reset(self):
        """
        Resets the configuration to default settings.
        """
        if os.path.exists(self.user_config_path):
            os.remove(self.user_config_path)
        self.load_config()
        print("Configuration reset to defaults.")

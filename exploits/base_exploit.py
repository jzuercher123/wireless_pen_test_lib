from abc import ABC, abstractmethod
import logging

class BaseExploit(ABC):
    def __init__(self, core_framework, vulnerability):
        """
        Initializes the BaseExploit.

        :param core_framework: Instance of CoreFramework for accessing packet handling and event dispatching.
        :param vulnerability: Dictionary containing vulnerability details.
        """
        self.core = core_framework
        self.vulnerability = vulnerability
        self.logger = logging.getLogger(self.__class__.__name__)

    @abstractmethod
    def exploit(self):
        """
        Executes the exploitation process.
        """
        pass

    @abstractmethod
    def cleanup(self):
        """
        Cleans up after exploitation to restore the environment.
        """
        pass
